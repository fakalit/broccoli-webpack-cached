var log               = require('broccoli-stew').log;
var webpack           = require('webpack');
var mergeTrees        = require('broccoli-merge-trees');
var esTranspiler      = require('broccoli-babel-transpiler');
var ExtractTextPlugin = require("extract-text-webpack-plugin");
var HtmlWebpackPlugin = require('html-webpack-plugin');

var WebpackFilter     = require('../../../index');


// Starting input tree
var tree = './src';

tree = log(tree, {output: 'tree'});

tree = esTranspiler(tree, {
  sourceMaps: 'inline',
  filterExtensions: ['js']
});


var bundleTree = WebpackFilter(tree, {
  entry: {
    one: "./entry.js",
    two: "./entry2.js",
    requireTest: "./js/combiner.js"
  },

  output: {
    filename: "[name]-bundle.js",
    chunkFilename: "[id]-chunk-bundle.js"
  },

  externals: {
    jquery: 'jQuery'
  },

  devtool: 'cheap-module-inline-source-map',

  node: {
    __filename: true,
    __dirname: true
  },

  plugins: [
    // new webpack.optimize.UglifyJsPlugin(),

    new webpack.optimize.CommonsChunkPlugin("extra.bundle.js"),

    new HtmlWebpackPlugin({
      filename: 'one.html',
      title: 'Generated by webpack',
      inject: 'body',
      excludeChunks: ['two'],
      templateContent:  function(templateParams, compilation) {
        return [
          '<html>',
          '  <head>',
          '    <meta charset="utf-8">',
          '  </head>',
          '  <body>',
          '    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>',
          '  </body>',
          '</html>',
        ].join('\n');
      }
    }),

    new HtmlWebpackPlugin({
      filename: 'two.html',
      title: 'Generated by webpack',
      inject: 'body',
      excludeChunks: ['one'],
      templateContent:  function(templateParams, compilation) {
        return [
          '<html>',
          '  <head>',
          '    <meta charset="utf-8">',
          '  </head>',
          '  <body>',
          '    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>',
          '  </body>',
          '</html>',
        ].join('\n');
      }
    }),

    // Use the plugin to specify the resulting filename (and add needed behavior to the compiler)
    new ExtractTextPlugin("[name].css", {
      allChunks: false
    })
  ],

  module: {
    preLoaders: [
      {
        test: /\.js$/,
        loaders: ["source-map-loader"]
      }
    ],

    loaders: [{
      test: /\.css$/,
      loader: ExtractTextPlugin.extract("style-loader", "css-loader?sourceMap")
    },
      // { test: /\.css$/, loader: "style!css" }
    ]
  },

  resolve: {
    root: []
  }

});

bundleTree = log(bundleTree, {output: 'tree'});


module.exports = mergeTrees([tree, bundleTree]);
